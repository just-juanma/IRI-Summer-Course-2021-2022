Read carefully about Dynamic Matrices or Double Pointers (https://www.techiedelight.com/dynamically-allocate-memory-for-2d-array/). Use the acquired knowledge to pass this test.
Develop 3 algorithms that allow to obtain the diagonal of a matrix as the sum of its diagonal, and the sum in two dynamic vectors of each row and each column, e.g. VecRow[n] = { SumF1, ...., SumFn } and VecColumn[n] = { SumC1, ...., SumCn }.
These algorithms will be executed according to the mode received by the MatrixProcess function.
Implement the following functions
	int* getDiagonal:
		1. info
		- int n
		- int m
		- int** matrix
	int* sumRowsandColumns:
		Information 1.
		- int n
		- int m
		- int** matrix
		- int** refSumColumns
	void ProcessedMatrices:
		1. information
		- int mode
		- int n
		- int m
		- int** matrix
		2. Print Parameters
		- int* my_diagonal
		- int* diagonalSum
		- int* sumRow
		- int* sumColumn

Input Format
0
3
3
52 32 89
20 91 37
65 3 48

0
4
3
52 32 89
20 91 37
65 3 48
32 45 27

1
3
4
52 32 89 32
20 91 37 20
65 3 48 65

2
3
4
20 30 40 10
23 34 41 12
33 44 11 22

Constraints
- You only have 3 modes of matrix processing.
- Avoid doing extra code, maybe you can recycle a function ⚠️.
- Remember to free all the memory you requested.
DELETE THESE PARAMETERS, they are created automatically
- int* result_count
- int refSumColumns_rows
- int refSumColumns_columns

Output Format
My Diagional: 52 91 48
Cannot obtain the diagonal of a NON-square matrix.    
Cannot get the diagonal sum of a NON square matrix
Sum Of Each Row: 100 110 110
Sum Of Each Column: 76 108 92 44

Sample Input 0
0
3
3
52 32 89
20 91 37
65 3 48

Sample Output 0
My Diagonal: 52 91 48

Sample Input 1
1
3
3
52 32 89
20 91 37
65 3 48

Sample Output 1
Diagonal Sum: 191

Sample Input 2
1
6
3
54 45 33
98 9 96
31 50 98
89 72 50
81 39 52
46 12 80

Sample Output 2
Cannot obtain the diagonal sum of a NON square matrix